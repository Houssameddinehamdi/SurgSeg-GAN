# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLO11-seg instance segmentation model. For Usage examples see https://docs.ultralytics.com/tasks/segment

# Parameters
nc: 11 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolo11n-seg.yaml' will call yolo11-seg.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.50, 0.25, 1024] # summary: 355 layers, 2876848 parameters, 2876832 gradients, 10.5 GFLOPs
  s: [0.50, 0.50, 1024] # summary: 355 layers, 10113248 parameters, 10113232 gradients, 35.8 GFLOPs
  m: [0.50, 1.00, 512] # summary: 445 layers, 22420896 parameters, 22420880 gradients, 123.9 GFLOPs
  l: [1.00, 1.00, 512] # summary: 667 layers, 27678368 parameters, 27678352 gradients, 143.0 GFLOPs
  x: [1.00, 1.50, 512] # summary: 667 layers, 62142656 parameters, 62142640 gradients, 320.2 GFLOPs

# YOLO11n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4
  - [-1, 2, C3k2, [256, False, 0.25]]
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8
  - [-1, 2, C3k2, [512, False, 0.25]]
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16
  - [-1, 2, C3k2, [512, True]]
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32
  - [-1, 2, C3k2, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]] # 9
  - [-1, 2, C2PSA, [1024]] # 10

# YOLO11n head
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 6], 1, Concat, [1]] # cat backbone P4
  - [-1, 2, C3k2, [512, False]] # 13

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]
  - [[-1, 4], 1, Concat, [1]] # cat backbone P3
  - [-1, 2, C3k2, [256, False]] # 16 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 13], 1, Concat, [1]] # cat head P4
  - [-1, 2, C3k2, [512, False]] # 19 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 10], 1, Concat, [1]] # cat head P5
  - [-1, 2, C3k2, [1024, True]] # 22 (P5/32-large)

  - [[16, 19, 22], 1, Segment, [nc, 32, 256]] # Detect(P3, P4, P5)

# Enhanced Occlusion Handling Components
occlusion_mask_generator:
  type: CNN
  parameters: 
    input_channels: 3 # Number of input channels (e.g., RGB)
    output_channels: 1 # Output is a binary mask
    layers: 
      - type: ConvLayer
        filters: 64
        kernel_size: 3
        stride: 1
        padding: same
        normalization: GroupNorm # Improved stability
        activation: ReLU
      - type: DepthwiseSeparableConvLayer # Efficient convolution
        filters: 128
        kernel_size: 3
        stride: 2
        padding: same
        normalization: BatchNorm
        activation: ReLU
      - type: DepthwiseSeparableConvLayer
        filters: 256
        kernel_size: 3
        stride: 2
        padding: same
        normalization: BatchNorm
        activation: ReLU
      - type: FinalLayer
        activation: sigmoid # Binary mask output

occlusion_aware_generator:
  type: GAN
  parameters:
    input_channels: 4 # Original image + occlusion mask
    output_channels: 3 # Generated image channels (RGB)
    generator_layers:
      - type: ConvLayer
        filters: 64
        kernel_size: 7
        stride: 1
        padding: same
        normalization: GroupNorm
        activation: ReLU
      - type: ResBlock
        filters: 128
        normalization: GroupNorm
        attention: True # Self-attention for better context
      - type: ResBlock
        filters: 256
        normalization: GroupNorm
        attention: True
      - type: UpsampleLayer
        scale_factor: 2 # Upsampling to original size
        method: bilinear # Smoother upsampling
      - type: FinalLayer
        activation: tanh # For image generation
    training_optimizations:
      loss: HingeGANLoss # Better gradient behavior
      lr_schedule: CosineAnnealing # Adaptive learning rate

discriminators:
  type: MultiScaleDiscriminator # Evaluate across scales
  parameters:
    num_discriminators: 3 # Increased for multi-scale realism
    discriminator_layers:
      - type: ConvLayer
        filters: 64
        kernel_size: 4
        stride: 2
        normalization: SpectralNorm # Stabilizes GAN training
        activation: LeakyReLU
      - type: ConvLayer
        filters: 128
        kernel_size: 4
        stride: 2
        normalization: SpectralNorm
        activation: LeakyReLU
      - type: FinalLayer
        activation: sigmoid # Real vs fake classification
    shared_features: True # Share lower-level features for efficiency
    training_optimizations:
      gradient_penalty: True # Improved stability
      lr_schedule: ExponentialDecay
      multi_gpu: True # Support for parallelism
